{"version":3,"sources":["index.js","src\\storage\\index.js","src\\utils\\httpRequest.js","src\\utils\\auth.js","package.json","src\\functions\\index.js","src\\auth\\index.js","src\\wx\\index.js","src\\utils\\dbRequest.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,ACHA,AJYA,AENA,ADGA;AFOA,AIZA,ACHA,AJYA,AENA,ADGA;AFOA,AIZA,ACHA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ADGA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ADGA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ADGA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ADGA,AJYA,AENA,ADGA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,ADGA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,ADGA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AENA,ADGA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,ACHA,AJYA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AHSA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AHSA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AHSA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AHSA,AENA,AKfA,ANkBA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA,AKfA;APsBA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AELA,AHSA,AENA,ADGA;AELA,AHSA,AENA,ADGA;AELA,AHSA,AENA,ADGA;AELA,AHSA,AENA,ADGA;AELA,AHSA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA;AFOA,AENA;AFOA,AENA;AFOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const database = require('@cloudbase/database').Db\nconst storage = require('./src/storage')\nconst functions = require('./src/functions')\nconst auth = require('./src/auth')\nconst wx = require('./src/wx')\nconst Request = require('./src/utils/dbRequest')\n\nfunction Tcb(config) {\n  this.config = config ? config : this.config\n}\n\nTcb.prototype.init = function({\n  secretId,\n  secretKey,\n  sessionToken,\n  env,\n  proxy,\n  timeout,\n  serviceUrl,\n  isHttp\n} = {}) {\n  if ((secretId && !secretKey) || (!secretId && secretKey)) {\n    throw Error('secretId and secretKey must be a pair')\n  }\n\n  this.config = {\n    get secretId() {\n      return this._secretId ? this._secretId : process.env.TENCENTCLOUD_SECRETID\n    },\n    set secretId(id) {\n      this._secretId = id\n    },\n    get secretKey() {\n      return this._secretKey\n        ? this._secretKey\n        : process.env.TENCENTCLOUD_SECRETKEY\n    },\n    set secretKey(key) {\n      this._secretKey = key\n    },\n    get sessionToken() {\n      if (this._sessionToken === undefined) {\n        //默认临时密钥\n        return process.env.TENCENTCLOUD_SESSIONTOKEN\n      } else if (this._sessionToken === false) {\n        //固定秘钥\n        return undefined\n      } else {\n        //传入的临时密钥\n        return this._sessionToken\n      }\n    },\n    set sessionToken(token) {\n      this._sessionToken = token\n    },\n    envName: env,\n    proxy: proxy,\n    isHttp\n  }\n\n  this.config.secretId = secretId\n  this.config.secretKey = secretKey\n  this.config.timeout = timeout || 15000\n  this.config.serviceUrl = serviceUrl\n  this.config.sessionToken = sessionToken\n    ? sessionToken\n    : secretId && secretKey\n    ? false\n    : undefined\n\n  return new Tcb(this.config)\n}\n\nTcb.prototype.database = function(dbConfig) {\n  database.reqClass = Request\n  return new database({ ...this, ...dbConfig })\n}\n\n/**\n * @returns string\n */\nTcb.prototype.getCurrentEnv = function() {\n  return process.env.TCB_ENV || process.env.SCF_NAMESPACE\n}\n\nfunction each(obj, fn) {\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      fn(obj[i], i)\n    }\n  }\n}\n\nfunction extend(target, source) {\n  each(source, function(val, key) {\n    target[key] = source[key]\n  })\n  return target\n}\n\nextend(Tcb.prototype, functions)\nextend(Tcb.prototype, storage)\nextend(Tcb.prototype, wx)\nextend(Tcb.prototype, auth)\n\nmodule.exports = new Tcb()\n","const request = require('request')\nconst fs = require('fs')\nconst httpRequest = require('../utils/httpRequest')\nconst { parseString } = require('xml2js')\n\nasync function parseXML(str) {\n  return new Promise((resolve, reject) => {\n    parseString(str, (err, result) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(result)\n      }\n    })\n  })\n}\n\n/*\n * 上传文件\n * @param {string} cloudPath 上传后的文件路径\n * @param {fs.ReadStream} fileContent  上传文件的二进制流\n */\nasync function uploadFile({ cloudPath, fileContent }) {\n  const {\n    data: { url, token, authorization, fileId, cosFileId }\n  } = await getUploadMetadata.call(this, { cloudPath })\n\n  const formData = {\n    Signature: authorization,\n    'x-cos-security-token': token,\n    'x-cos-meta-fileid': cosFileId,\n    key: cloudPath,\n    file: fileContent\n  }\n\n  let body = await new Promise((resolve, reject) => {\n    request.post({ url, formData: formData }, function(err, res, body) {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(body)\n      }\n    })\n  })\n\n  body = await parseXML(body)\n  if (body && body.Error) {\n    const {\n      Code: [code],\n      Message: [message]\n    } = body.Error\n    if (code === 'SignatureDoesNotMatch') {\n      return {\n        code: 'SYS_ERR',\n        message\n      }\n    }\n    return {\n      code: 'STORAGE_REQUEST_FAIL',\n      message\n    }\n  }\n\n  return {\n    fileID: fileId\n  }\n}\n\n/**\n * 删除文件\n * @param {Array.<string>} fileList 文件id数组\n */\nasync function deleteFile({ fileList }) {\n  if (!fileList || !Array.isArray(fileList)) {\n    return {\n      code: 'INVALID_PARAM',\n      message: 'fileList必须是非空的数组'\n    }\n  }\n\n  for (let file of fileList) {\n    if (!file || typeof file != 'string') {\n      return {\n        code: 'INVALID_PARAM',\n        message: 'fileList的元素必须是非空的字符串'\n      }\n    }\n  }\n\n  let params = {\n    action: 'storage.batchDeleteFile',\n    fileid_list: fileList\n  }\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: 'post',\n    headers: {\n      'content-type': 'application/json'\n    }\n  }).then(res => {\n    if (res.code) {\n      return res\n    } else {\n      return {\n        fileList: res.data.delete_list,\n        requestId: res.requestId\n      }\n    }\n  })\n}\n\n/**\n * 获取文件下载链接\n * @param {Array.<Object>} fileList\n */\nasync function getTempFileURL({ fileList }) {\n  if (!fileList || !Array.isArray(fileList)) {\n    return {\n      code: 'INVALID_PARAM',\n      message: 'fileList必须是非空的数组'\n    }\n  }\n\n  let file_list = []\n  for (let file of fileList) {\n    if (typeof file === 'object') {\n      if (!file.hasOwnProperty('fileID') || !file.hasOwnProperty('maxAge')) {\n        return {\n          code: 'INVALID_PARAM',\n          message: 'fileList的元素必须是包含fileID和maxAge的对象'\n        }\n      }\n\n      file_list.push({\n        fileid: file.fileID,\n        max_age: file.maxAge\n      })\n    } else if (typeof file === 'string') {\n      file_list.push({\n        fileid: file\n      })\n    } else {\n      return {\n        code: 'INVALID_PARAM',\n        message: 'fileList的元素必须是字符串'\n      }\n    }\n  }\n\n  let params = {\n    action: 'storage.batchGetDownloadUrl',\n    file_list\n  }\n  // console.log(params);\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: 'post',\n    headers: {\n      'content-type': 'application/json'\n    }\n  }).then(res => {\n    // console.log(res);\n    if (res.code) {\n      return res\n    } else {\n      return {\n        fileList: res.data.download_list,\n        requestId: res.requestId\n      }\n    }\n  })\n}\n\nasync function downloadFile({ fileID, tempFilePath }) {\n  let tmpUrl,\n    self = this\n  try {\n    const tmpUrlRes = await this.getTempFileURL({\n      fileList: [\n        {\n          fileID,\n          maxAge: 600\n        }\n      ]\n    })\n    // console.log(tmpUrlRes);\n    const res = tmpUrlRes.fileList[0]\n\n    if (res.code != 'SUCCESS') {\n      return res\n    }\n\n    tmpUrl = res.tempFileURL\n    tmpUrl = encodeURI(tmpUrl)\n  } catch (e) {\n    throw e\n  }\n\n  let req = request({\n    url: tmpUrl,\n    encoding: null,\n    proxy: self.config.proxy\n  })\n\n  return new Promise((resolve, reject) => {\n    let fileContent = Buffer.alloc(0)\n    req.on('response', function(response) {\n      if (response && +response.statusCode === 200) {\n        if (tempFilePath) {\n          response.pipe(fs.createWriteStream(tempFilePath))\n        } else {\n          response.on('data', data => {\n            fileContent = Buffer.concat([fileContent, data])\n          })\n        }\n        response.on('end', () => {\n          resolve({\n            fileContent: tempFilePath ? undefined : fileContent,\n            message: '文件下载完成'\n          })\n        })\n      } else {\n        reject(response)\n      }\n    })\n  })\n}\n\nasync function getUploadMetadata({ cloudPath }) {\n  let params = {\n    action: 'storage.getUploadMetadata',\n    path: cloudPath\n  }\n\n  const res = await httpRequest({\n    config: this.config,\n    params,\n    method: 'post',\n    headers: {\n      'content-type': 'application/json'\n    }\n  })\n\n  if (res.code) {\n    throw new Error('get upload metadata failed: ' + res.code)\n  } else {\n    return res\n  }\n}\n\nexports.uploadFile = uploadFile\nexports.deleteFile = deleteFile\nexports.getTempFileURL = getTempFileURL\nexports.downloadFile = downloadFile\nexports.getUploadMetadata = getUploadMetadata\n","var request = require('request')\nvar auth = require('./auth.js')\nconst version = require('../../package.json').version\n\nmodule.exports = function(args) {\n  var config = args.config,\n    params = args.params,\n    method = args.method || 'get',\n    protocol = config.isHttp === true ? 'http' : 'https'\n\n  let seqId = process.env.TCB_SEQID || ''\n\n  const eventId =\n    new Date().valueOf() +\n    '_' +\n    Math.random()\n      .toString()\n      .substr(2, 5)\n\n  seqId = seqId ? `${seqId}${new Date().getTime()}` : eventId\n  params = Object.assign({}, params, {\n    envName: config.envName,\n    timestamp: new Date().valueOf(),\n    eventId\n  })\n\n  for (let key in params) {\n    if (params[key] === undefined) {\n      delete params[key]\n    }\n  }\n  // file 和 wx.openApi带的requestData 需避开签名\n  let file = null\n  if (params.action === 'storage.uploadFile') {\n    file = params['file']\n    delete params['file']\n  }\n\n  let requestData = null\n  if (params.action === 'wx.openApi') {\n    requestData = params['requestData']\n    delete params['requestData']\n  }\n\n  if (!config.secretId || !config.secretKey) {\n    if (process.env.TENCENTCLOUD_RUNENV === 'SCF') {\n      throw Error('missing authoration key, redeploy the function')\n    }\n    throw Error('missing secretId or secretKey of tencent cloud')\n  }\n\n  // Note: 云函数被调用时可能调用端未传递SOURCE，TCB_SOURCE 可能为空\n  const TCB_SOURCE = process.env.TCB_SOURCE || ''\n  const SOURCE =\n    process.env.TENCENTCLOUD_RUNENV === 'SCF'\n      ? `${TCB_SOURCE},scf`\n      : `${TCB_SOURCE},not_scf`\n\n  const authObj = {\n    SecretId: config.secretId,\n    SecretKey: config.secretKey,\n    Method: method,\n    pathname: '/admin',\n    Query: params,\n    Headers: Object.assign(\n      {\n        'user-agent': `tcb-admin-sdk/${version}`,\n        'x-tcb-source': SOURCE\n      },\n      args.headers || {}\n    )\n  }\n\n  var authorization = auth.getAuth(authObj)\n\n  params.authorization = authorization\n\n  file && (params.file = file)\n  requestData && (params.requestData = requestData)\n  config.sessionToken && (params.sessionToken = config.sessionToken)\n  params.sdk_version = version\n\n  let url = protocol + '://tcb-admin.tencentcloudapi.com/admin'\n\n  if (process.env.TENCENTCLOUD_RUNENV === 'SCF') {\n    url = 'http://tcb-admin.tencentyun.com/admin'\n  }\n\n  if (params.action === 'wx.api' || params.action === 'wx.openApi') {\n    url = protocol + '://tcb-open.tencentcloudapi.com/admin'\n  }\n\n  var opts = {\n    url: config.serviceUrl || url,\n    method: args.method || 'get',\n    // 先取模块的timeout，没有则取sdk的timeout，还没有就使用默认值\n    timeout: args.timeout || config.timeout || 15000,\n    headers: authObj.Headers,\n    proxy: config.proxy\n  }\n\n  opts.url = `${opts.url}?eventId=${eventId}&seqId=${seqId}`\n\n  if (params.action === 'storage.uploadFile') {\n    opts.formData = params\n    opts.formData.file = {\n      value: params.file,\n      options: {\n        filename: params.path\n      }\n    }\n  } else if (args.method == 'post') {\n    if (params.action === 'wx.openApi') {\n      opts.formData = params\n      opts.encoding = null\n    } else {\n      opts.body = params\n      opts.json = true\n    }\n  } else {\n    opts.qs = params\n  }\n\n  if (args.proxy) {\n    opts.proxy = args.proxy\n  }\n  return new Promise(function(resolve, reject) {\n    request(opts, function(err, response, body) {\n      args && args.callback && args.callback(response)\n\n      if (err === null && response.statusCode == 200) {\n        let res\n        try {\n          res = typeof body === 'string' ? JSON.parse(body) : body\n          // wx.openApi 调用时，需用content-type区分buffer or JSON\n          if (params.action === 'wx.openApi') {\n            const { headers } = response\n            if (headers['content-type'] === 'application/json; charset=utf-8') {\n              res = JSON.parse(res.toString()) // JSON错误时buffer转JSON\n            }\n          }\n        } catch (e) {\n          res = body\n        }\n        return resolve(res)\n      } else {\n        return reject(err)\n      }\n    })\n  })\n}\n","var crypto = require('crypto')\n\nfunction camSafeUrlEncode(str) {\n  return encodeURIComponent(str)\n    .replace(/!/g, '%21')\n    .replace(/'/g, '%27')\n    .replace(/\\(/g, '%28')\n    .replace(/\\)/g, '%29')\n    .replace(/\\*/g, '%2A')\n}\nfunction map(obj, fn) {\n  var o = isArray(obj) ? [] : {}\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = fn(obj[i], i)\n    }\n  }\n  return o\n}\nfunction isArray(arr) {\n  return arr instanceof Array\n}\n\nfunction clone(obj) {\n  return map(obj, function(v) {\n    return typeof v === 'object' && v !== undefined && v !== null ? clone(v) : v\n  })\n}\n//测试用的key后面可以去掉\nvar getAuth = function(opt) {\n  //   console.log(opt);\n  opt = opt || {}\n\n  var SecretId = opt.SecretId\n  var SecretKey = opt.SecretKey\n  var method = (opt.method || opt.Method || 'get').toLowerCase()\n  var pathname = opt.pathname || '/'\n  var queryParams = clone(opt.Query || opt.params || {})\n  var headers = clone(opt.Headers || opt.headers || {})\n  pathname.indexOf('/') !== 0 && (pathname = '/' + pathname)\n\n  if (!SecretId) return console.error('missing param SecretId')\n  if (!SecretKey) return console.error('missing param SecretKey')\n\n  var getObjectKeys = function(obj) {\n    var list = []\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (obj[key] === undefined) {\n          continue\n        }\n        list.push(key)\n      }\n    }\n    return list.sort()\n  }\n\n  var obj2str = function(obj) {\n    var i, key, val\n    var list = []\n    var keyList = getObjectKeys(obj)\n    for (i = 0; i < keyList.length; i++) {\n      key = keyList[i]\n      if (obj[key] === undefined) {\n        continue\n      }\n      val = obj[key] === null ? '' : obj[key]\n      if (typeof val !== 'string') {\n        val = JSON.stringify(val)\n      }\n      key = key.toLowerCase()\n      key = camSafeUrlEncode(key)\n      val = camSafeUrlEncode(val) || ''\n      list.push(key + '=' + val)\n    }\n    return list.join('&')\n  }\n\n  // 签名有效起止时间\n  var now = parseInt(new Date().getTime() / 1000) - 1\n  var exp = now\n\n  var Expires = opt.Expires || opt.expires\n  if (Expires === undefined) {\n    exp += 900 // 签名过期时间为当前 + 900s\n  } else {\n    exp += Expires * 1 || 0\n  }\n\n  // 要用到的 Authorization 参数列表\n  var qSignAlgorithm = 'sha1'\n  var qAk = SecretId\n  var qSignTime = now + ';' + exp\n  var qKeyTime = now + ';' + exp\n  var qHeaderList = getObjectKeys(headers)\n    .join(';')\n    .toLowerCase()\n  var qUrlParamList = getObjectKeys(queryParams)\n    .join(';')\n    .toLowerCase()\n\n  // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778\n  // 步骤一：计算 SignKey\n  var signKey = crypto\n    .createHmac('sha1', SecretKey)\n    .update(qKeyTime)\n    .digest('hex')\n\n  // console.log(\"queryParams\", queryParams);\n  // console.log(obj2str(queryParams));\n\n  // 步骤二：构成 FormatString\n  var formatString = [\n    method,\n    pathname,\n    obj2str(queryParams),\n    obj2str(headers),\n    ''\n  ].join('\\n')\n\n  // console.log(formatString);\n  formatString = Buffer.from(formatString, 'utf8')\n\n  // 步骤三：计算 StringToSign\n  var sha1Algo = crypto.createHash('sha1')\n  sha1Algo.update(formatString)\n  var res = sha1Algo.digest('hex')\n  var stringToSign = ['sha1', qSignTime, res, ''].join('\\n')\n\n  // console.log(stringToSign);\n  // 步骤四：计算 Signature\n  var qSignature = crypto\n    .createHmac('sha1', signKey)\n    .update(stringToSign)\n    .digest('hex')\n\n  // 步骤五：构造 Authorization\n  var authorization = [\n    'q-sign-algorithm=' + qSignAlgorithm,\n    'q-ak=' + qAk,\n    'q-sign-time=' + qSignTime,\n    'q-key-time=' + qKeyTime,\n    'q-header-list=' + qHeaderList,\n    'q-url-param-list=' + qUrlParamList,\n    'q-signature=' + qSignature\n  ].join('&')\n\n  return authorization\n}\n\nexports.getAuth = getAuth\n","module.exports = {\n  \"_from\": \"tcb-admin-node@1.9.0\",\n  \"_id\": \"tcb-admin-node@1.9.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-TYoBo66CEIIw1QzgK4Jq43G45zvBE6ZB35LbDV8wwLQvg6CiZHlmOTVZkgj2YZ8O87ELi+ZE3UBVNZM3nFa6lQ==\",\n  \"_location\": \"/tcb-admin-node\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"version\",\n    \"registry\": true,\n    \"raw\": \"tcb-admin-node@1.9.0\",\n    \"name\": \"tcb-admin-node\",\n    \"escapedName\": \"tcb-admin-node\",\n    \"rawSpec\": \"1.9.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"1.9.0\"\n  },\n  \"_requiredBy\": [\n    \"/wx-server-sdk\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/tcb-admin-node/-/tcb-admin-node-1.9.0.tgz\",\n  \"_shasum\": \"b48973c10133b8fbd2a78740dd603a1627a0dce1\",\n  \"_spec\": \"tcb-admin-node@1.9.0\",\n  \"_where\": \"D:\\\\小程序\\\\RssHub-master\\\\cloud-functions\\\\delete_post\\\\node_modules\\\\wx-server-sdk\",\n  \"author\": {\n    \"name\": \"jimmyzhang\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/TencentCloudBase/tcb-admin-node/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"@cloudbase/database\": \"0.1.1\",\n    \"is-regex\": \"^1.0.4\",\n    \"lodash.merge\": \"^4.6.1\",\n    \"request\": \"^2.87.0\",\n    \"xml2js\": \"^0.4.19\"\n  },\n  \"deprecated\": false,\n  \"description\": \"tencent cloud base admin sdk for node.js\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^23.1.4\",\n    \"@types/mocha\": \"^5.2.4\",\n    \"@types/node\": \"^10.12.12\",\n    \"dumper.js\": \"^1.3.0\",\n    \"eslint\": \"^5.16.0\",\n    \"eslint-config-prettier\": \"^4.1.0\",\n    \"eslint-plugin-prettier\": \"^3.0.1\",\n    \"eslint-plugin-typescript\": \"^0.14.0\",\n    \"espower-typescript\": \"^8.1.4\",\n    \"husky\": \"^1.3.1\",\n    \"inquirer\": \"^6.3.1\",\n    \"jest\": \"^23.3.0\",\n    \"lint-staged\": \"^8.1.5\",\n    \"mocha\": \"^5.2.0\",\n    \"power-assert\": \"^1.5.0\",\n    \"prettier\": \"^1.17.0\",\n    \"semver\": \"^6.0.0\",\n    \"ts-jest\": \"^23.10.4\",\n    \"tslib\": \"^1.7.1\",\n    \"typescript\": \"^3.4.3\",\n    \"typescript-eslint-parser\": \"^22.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">=8.6.0\"\n  },\n  \"homepage\": \"https://github.com/TencentCloudBase/tcb-admin-node#readme\",\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"keywords\": [\n    \"tcb-admin\"\n  ],\n  \"license\": \"MIT\",\n  \"lint-staged\": {\n    \"*.js\": [\n      \"eslint --fix\",\n      \"git add\"\n    ]\n  },\n  \"main\": \"index.js\",\n  \"name\": \"tcb-admin-node\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/TencentCloudBase/tcb-admin-node.git\"\n  },\n  \"scripts\": {\n    \"coverage\": \"jest --verbose false --coverage\",\n    \"eslint\": \"eslint \\\"./**/*.js\\\" \\\"./**/*.ts\\\"\",\n    \"eslint-fix\": \"eslint --fix \\\"./**/*.js\\\" \\\"./**/*.ts\\\"\",\n    \"test\": \"jest --verbose false -i\",\n    \"tsc\": \"tsc -p tsconfig.json\",\n    \"tsc:w\": \"tsc -p tsconfig.json -w\",\n    \"tstest\": \"mocha --timeout 5000 --require espower-typescript/guess test/**/*.test.ts\"\n  },\n  \"version\": \"1.9.0\"\n}\n","const httpRequest = require('../utils/httpRequest')\n\n/**\n * 调用云函数\n * @param {String} name  函数名\n * @param {Object} functionParam 函数参数\n * @return {Promise}\n */\nfunction callFunction({ name, data }) {\n  try {\n    data = data ? JSON.stringify(data) : ''\n  } catch (e) {\n    return Promise.reject(e)\n  }\n  if (!name) {\n    return Promise.reject(\n      new Error({\n        message: '函数名不能为空'\n      })\n    )\n  }\n\n  const wxCloudApiToken = process.env.WX_API_TOKEN || ''\n\n  let params = {\n    action: 'functions.invokeFunction',\n    function_name: name,\n    request_data: data,\n    wxCloudApiToken\n  }\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: 'post',\n    headers: {\n      'content-type': 'application/json'\n    }\n  }).then(res => {\n    // console.log(res);\n    if (res.code) {\n      return res\n    } else {\n      let result\n      try {\n        result = JSON.parse(res.data.response_data)\n      } catch (e) {\n        result = res.data.response_data\n      }\n      return {\n        result,\n        requestId: res.requestId\n      }\n    }\n  })\n}\n\nexports.callFunction = callFunction\n","function getUserInfo() {\n  const openId = process.env.WX_OPENID || ''\n  const appId = process.env.WX_APPID || ''\n  const uid = process.env.TCB_UUID || ''\n\n  return {\n    openId,\n    appId,\n    uid\n  }\n}\n\nexports.auth = function() {\n  return { getUserInfo }\n}\n","const httpRequest = require('../utils/httpRequest')\n\nexports.callWxOpenApi = function({ apiName, requestData } = {}) {\n  try {\n    requestData = requestData ? JSON.stringify(requestData) : ''\n  } catch (e) {\n    throw Error(e)\n  }\n\n  const wxCloudApiToken = process.env.WX_API_TOKEN || ''\n\n  const tcb_sessionToken = process.env.TCB_SESSIONTOKEN || ''\n\n  let params = {\n    action: 'wx.api',\n    apiName,\n    requestData,\n    wxCloudApiToken,\n    tcb_sessionToken\n  }\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: 'post',\n    headers: {\n      'content-type': 'application/json'\n    }\n  }).then(res => {\n    if (res.code) {\n      return res\n    } else {\n      let result\n      try {\n        result = JSON.parse(res.data.responseData)\n      } catch (e) {\n        result = res.data.responseData\n      }\n      return {\n        result,\n        requestId: res.requestId\n      }\n    }\n  })\n}\n\n/**\n * 调用wxopenAPi\n * @param {String} apiName  接口名\n * @param {Buffer} requestData\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\n */\nexports.callCompatibleWxOpenApi = function({ apiName, requestData } = {}) {\n  const wxCloudApiToken = process.env.WX_API_TOKEN || ''\n  const tcb_sessionToken = process.env.TCB_SESSIONTOKEN || ''\n\n  let params = {\n    action: 'wx.openApi',\n    apiName,\n    requestData,\n    wxCloudApiToken,\n    tcb_sessionToken\n  }\n\n  return httpRequest({\n    config: this.config,\n    params,\n    method: 'post',\n    headers: {}\n  }).then(res => res)\n}\n","const requestHandler = require('./httpRequest')\n\n/**\n * 数据库模块的通用请求方法\n *\n * @author haroldhu\n * @internal\n */\nclass Request {\n  /**\n   * 初始化\n   *\n   * @internal\n   * @param config\n   */\n  constructor(config) {\n    this.config = config\n  }\n\n  /**\n   * 发送请求\n   *\n   * @param api   - 接口\n   * @param data  - 参数\n   */\n  async send(api, data) {\n    const params = Object.assign({}, data, {\n      action: api\n    })\n\n    const slowQueryWarning = setTimeout(() => {\n      console.warn(\n        'Database operation is longer than 3s. Please check query performance and your network environment.'\n      )\n    }, 3000)\n\n    try {\n      return await requestHandler({\n        timeout: this.config.timeout,\n        config: this.config.config,\n        params,\n        method: 'post',\n        headers: {\n          'content-type': 'application/json'\n        }\n      })\n    } finally {\n      clearTimeout(slowQueryWarning)\n    }\n  }\n}\n\nmodule.exports = Request\n"]}